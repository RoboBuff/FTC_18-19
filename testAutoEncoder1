package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

@Autonomous(group = "EncoderDrive", name = "Blue_1")
public class testAuto1 extends LinearOpMode{

    hardwareDrive MyRobot = new hardwareDrive();

    private ElapsedTime runtime = new ElapsedTime();

    static final double Counts_Per_Motor_Rev = 1680/*ticks*/;
    static final double Drive_Gear_Reduction = 2.0;
    static final double Wheel_Diameter_Inches = 4.0/*Diameter in inches*/;
    static final double Counts_Per_Inch = (Counts_Per_Motor_Rev * Drive_Gear_Reduction)
            /(Wheel_Diameter_Inches * 3.1415);

    static final double Drive_Gear_Reduction2 = 9.0;
    static final double Counts_Per_Inch2 = (Counts_Per_Motor_Rev * Drive_Gear_Reduction2) /(Wheel_Diameter_Inches * Math.PI);

    static final double Drive_Speed = 1.0;
    static final double lift_Speed  = 1.0;
    static final double Turn_Speed = 0.5;

    @Override
    public void runOpMode() throws InterruptedException {

        //This is from robotHardware map
        MyRobot.init(hardwareMap);

        telemetry.addData("Status : ", "Resetting encoders");
        telemetry.update();

        encoderSetUp();

        //Robot waits for start button
        waitForStart();

        encoderLift(lift_Speed, -66, -66, 2.0);
        encoderDrive(-Turn_Speed, 2, -2, 2.0);
        encoderLift(-lift_Speed, 66, 66, 2.0);

        telemetry.addData("Path : ", "Complete");
        telemetry.update();

        sleep(1000);

        encoderDrive(Drive_Speed, -34, -34, 2.0);
        encoderDrive(Turn_Speed, 5, -5, 2.0);
        encoderDrive(Drive_Speed, 34, 34, 2.0);


        telemetry.addData("Path : ", "Complete");
        telemetry.update();

    }

    public void encoderSetUp(){

        MyRobot.rightMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MyRobot.leftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MyRobot.rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        MyRobot.leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        telemetry.addData("Path0 ", "Starting at %7d : %7d",
                MyRobot.leftMotor.getCurrentPosition(),
                MyRobot.rightMotor.getCurrentPosition());
        telemetry.update();
    }

    public void encoderDrive(double speed,
                             double leftInches, double rightInches,
                             double timeouts) {

        int newLeftTarget;
        int newRightTarget;

        if (opModeIsActive()){

            newLeftTarget = MyRobot.leftMotor.getCurrentPosition() + (int)(leftInches * Counts_Per_Inch);
            newRightTarget = MyRobot.rightMotor.getCurrentPosition() + (int)(rightInches * Counts_Per_Inch);

            MyRobot.leftMotor.setTargetPosition(newLeftTarget);
            MyRobot.rightMotor.setTargetPosition(newRightTarget);

            MyRobot.leftMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            MyRobot.rightMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            runtime.reset();
            MyRobot.leftMotor.setPower(Math.abs(speed));
            MyRobot.rightMotor.setPower(Math.abs(speed));

            while (opModeIsActive() &&
                    (runtime.seconds() < timeouts) &&
                    (MyRobot.leftMotor.isBusy() && MyRobot.rightMotor.isBusy())) {

                telemetry.addData("Path1", "Running to %7d : %7d", newLeftTarget, newRightTarget );
                telemetry.addData("Path2", "Running to %7d : %7d" ,
                        MyRobot.leftMotor.getCurrentPosition(),
                        MyRobot.rightMotor.getCurrentPosition());
                telemetry.update();
            }

            MyRobot.leftMotor.setPower(0);
            MyRobot.rightMotor.setPower(0);

            MyRobot.leftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            MyRobot.rightMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            sleep(250);
        }
    }

    public void encoderLift(double speed,
                            double leftInches, double rightInches,
                            double timeouts) {

        int newLeftTarget, newRightTarget;

        if (opModeIsActive()) {

            newLeftTarget = MyRobot.leftArmMotor.getCurrentPosition() + (int) (leftInches * Counts_Per_Inch2);
            newRightTarget = MyRobot.rightArmMotor.getCurrentPosition() + (int) (rightInches * Counts_Per_Inch2);

            MyRobot.leftArmMotor.setTargetPosition(newLeftTarget);
            MyRobot.rightArmMotor.setTargetPosition(newRightTarget);

            MyRobot.leftArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            MyRobot.rightArmMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            runtime.reset();

            MyRobot.leftArmMotor.setPower(Math.abs(speed));
            MyRobot.rightArmMotor.setPower(Math.abs(speed));

            while (opModeIsActive() &&
                    (runtime.seconds() < timeouts) &&
                    (MyRobot.leftArmMotor.isBusy() && MyRobot.rightArmMotor.isBusy())) {

                telemetry.addData("Path1 ", "Running to %7d : &7d", newLeftTarget, newRightTarget);
                telemetry.addData("Path2 ", "Running to %7d : %7d",
                        MyRobot.leftArmMotor.getCurrentPosition(),
                        MyRobot.rightArmMotor.getCurrentPosition());
                telemetry.update();

            }

            MyRobot.leftArmMotor.setPower(0);
            MyRobot.rightArmMotor.setPower(0);

            MyRobot.leftArmMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            MyRobot.rightArmMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

            sleep(250);
        }

    }
}
